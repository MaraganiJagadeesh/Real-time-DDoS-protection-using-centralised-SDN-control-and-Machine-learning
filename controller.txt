from ryu.controller import ofp_event
from ryu.controller.handler import MAIN_DISPATCHER, DEAD_DISPATCHER
from ryu.controller.handler import set_ev_cls
from ryu.lib import hub

import switch
from datetime import datetime
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix, accuracy_score

class SimpleMonitor13(switch.SimpleSwitch13):

    def __init__(self, *args, **kwargs):
        super(SimpleMonitor13, self).__init__(*args, **kwargs)
        self.datapaths = {}
        self.monitor_thread = hub.spawn(self._monitor)

        start_time = datetime.now()
        self.train_flow_model()
        end_time = datetime.now()

        print("Training duration:", (end_time - start_time))

    @set_ev_cls(ofp_event.EventOFPStateChange, [MAIN_DISPATCHER, DEAD_DISPATCHER])
    def _state_change_handler(self, ev):
        datapath = ev.datapath
        if ev.state == MAIN_DISPATCHER:
            if datapath.id not in self.datapaths:
                self.logger.debug('Registering datapath: %016x', datapath.id)
                self.datapaths[datapath.id] = datapath
        elif ev.state == DEAD_DISPATCHER:
            if datapath.id in self.datapaths:
                self.logger.debug('Unregistering datapath: %016x', datapath.id)
                del self.datapaths[datapath.id]

    def _monitor(self):
        while True:
            for dp in self.datapaths.values():
                self._request_stats(dp)
            hub.sleep(10)
            self.predict_flow()

    def _request_stats(self, datapath):
        self.logger.debug('Sending stats request: %016x', datapath.id)
        parser = datapath.ofproto_parser
        req = parser.OFPFlowStatsRequest(datapath)
        datapath.send_msg(req)

    @set_ev_cls(ofp_event.EventOFPFlowStatsReply, MAIN_DISPATCHER)
    def _flow_stats_reply_handler(self, ev):
        timestamp = datetime.now().timestamp()

        with open("trained_traffic.csv", "w") as f:
            f.write('timestamp,datapath_id,flow_id,ip_src,tp_src,ip_dst,tp_dst,ip_proto,icmp_code,icmp_type,flow_duration_sec,flow_duration_nsec,idle_timeout,hard_timeout,flags,packet_count,byte_count,packet_count_per_second,packet_count_per_nsecond,byte_count_per_second,byte_count_per_nsecond\n')

            for stat in sorted([flow for flow in ev.msg.body if flow.priority == 1],
                               key=lambda f: (f.match['eth_type'], f.match['ipv4_src'], f.match['ipv4_dst'], f.match['ip_proto'])):

                ip_src = stat.match['ipv4_src']
                ip_dst = stat.match['ipv4_dst']
                ip_proto = stat.match['ip_proto']
                icmp_code = stat.match.get('icmpv4_code', -1)
                icmp_type = stat.match.get('icmpv4_type', -1)
                tp_src = stat.match.get('tcp_src', stat.match.get('udp_src', 0))
                tp_dst = stat.match.get('tcp_dst', stat.match.get('udp_dst', 0))

                flow_id = f"{ip_src}{tp_src}{ip_dst}{tp_dst}{ip_proto}"

                try:
                    pkt_per_sec = stat.packet_count / stat.duration_sec
                except:
                    pkt_per_sec = 0
                try:
                    pkt_per_nsec = stat.packet_count / stat.duration_nsec
                except:
                    pkt_per_nsec = 0
                try:
                    byte_per_sec = stat.byte_count / stat.duration_sec
                except:
                    byte_per_sec = 0
                try:
                    byte_per_nsec = stat.byte_count / stat.duration_nsec
                except:
                    byte_per_nsec = 0

                f.write(f"{timestamp},{ev.msg.datapath.id},{flow_id},{ip_src},{tp_src},{ip_dst},{tp_dst},{ip_proto},{icmp_code},{icmp_type},{stat.duration_sec},{stat.duration_nsec},{stat.idle_timeout},{stat.hard_timeout},{stat.flags},{stat.packet_count},{stat.byte_count},{pkt_per_sec},{pkt_per_nsec},{byte_per_sec},{byte_per_nsec}\n")

    def train_flow_model(self):
        self.logger.info("Training flow classifier...")

        df = pd.read_csv('traffic_dataset.csv')
        df.iloc[:, 2] = df.iloc[:, 2].str.replace('.', '', regex=False)
        df.iloc[:, 3] = df.iloc[:, 3].str.replace('.', '', regex=False)
        df.iloc[:, 5] = df.iloc[:, 5].str.replace('.', '', regex=False)

        X = df.iloc[:, :-1].astype('float64').values
        y = df.iloc[:, -1].values

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)
        self.flow_model = DecisionTreeClassifier(criterion='entropy', random_state=0).fit(X_train, y_train)

        y_pred = self.flow_model.predict(X_test)

        self.logger.info("Confusion Matrix:\n%s", confusion_matrix(y_test, y_pred))
        acc = accuracy_score(y_test, y_pred)
        self.logger.info("Accuracy: %.2f%%", acc * 100)
        self.logger.info("Error Rate: %.2f%%", (1 - acc) * 100)

    def predict_flow(self):
        try:
            df = pd.read_csv('trained_traffic.csv')
            df.iloc[:, 2] = df.iloc[:, 2].str.replace('.', '', regex=False)
            df.iloc[:, 3] = df.iloc[:, 3].str.replace('.', '', regex=False)
            df.iloc[:, 5] = df.iloc[:, 5].str.replace('.', '', regex=False)

            X = df.astype('float64').values
            predictions = self.flow_model.predict(X)

            legitimate, ddos = 0, 0
            victim = None

            for i, label in enumerate(predictions):
                if label == 0:
                    legitimate += 1
                else:
                    ddos += 1
                    victim = int(df.iloc[i, 5]) % 20

            self.logger.info("------------------------------------------------------------------------------")
            if legitimate / len(predictions) > 0.8:
                self.logger.info("Traffic is mostly legitimate.")
            else:
                self.logger.info("DDoS traffic detected.")
                if victim is not None:
                    self.logger.info("Potential victim: host h%d", victim)
            self.logger.info("------------------------------------------------------------------------------")

            with open("trained_traffic.csv", "w") as f:
                f.write('timestamp,datapath_id,flow_id,ip_src,tp_src,ip_dst,tp_dst,ip_proto,icmp_code,icmp_type,flow_duration_sec,flow_duration_nsec,idle_timeout,hard_timeout,flags,packet_count,byte_count,packet_count_per_second,packet_count_per_nsecond,byte_count_per_second,byte_count_per_nsecond\n')

        except Exception as e:
            self.logger.warning("Prediction failed: %s", str(e))
